const github = require('@actions/github');
const core = require('@actions/core');
const fs = require('fs');

const myToken = core.getInput('myToken');

const octokit = new github.GitHub(myToken);

const repoInfo = github.context.repo;
const imageData = '';

const run = async () => {
  const blob = await octokit.git.createBlob({ ...repoInfo, content: imageData, encoding: 'base64' });
  const heads = await octokit.git.listRefs({ ...repoInfo, namespace: 'heads/' });

  for (let head of heads.data) {
    core.debug(`Caginating ${head.ref}`);
    const headCommit = await octokit.git.getCommit({ ...repoInfo, commit_sha: head.object.sha });
    let tree = await octokit.git.getTree({ ...repoInfo, tree_sha: headCommit.data.tree.sha });

    const handleObjects = async (objects) => {
      for (let object of objects) {
        core.debug(`  Caginating ${object.path}`);
        if (object.type == 'tree' && object.path != ".github") {
          const innerTree = await octokit.git.getTree({ ...repoInfo, tree_sha: object.sha });
          const newTree = await handleObjects(innerTree.data.tree);
          object.sha = newTree.data.sha;
        }
        else if (object.type == 'blob') {
          object.sha = blob.data.sha;
        }
      }
      return octokit.git.createTree({ ...repoInfo, tree: objects });
    }

    const newTree = await handleObjects(tree.data.tree);
    const newCommit = await octokit.git.createCommit({ ...repoInfo, tree: newTree.data.sha, message: 'Caginate', parents: [headCommit.data.sha] });
    await octokit.git.updateRef({ ...repoInfo, ref: head.ref.substr(5), sha: newCommit.data.sha });
  }
}

run();